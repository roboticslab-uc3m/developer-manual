{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":""},{"location":"index.html#developer-manual","title":"Developer Manual","text":"<p>Developer Manual @ roboticslab-uc3m</p> <p>Click on the option you want, or use the <code>P</code> and <code>N</code> keys to navigate through the sections (Previous, Next).</p>"},{"location":"index.html#additional-notes","title":"Additional notes","text":"<p>The content of this documentation is generated from files hosted on GitHub.</p>"},{"location":"index.html#if-you-have-any-doubts-or-comments","title":"If you have any doubts or comments","text":"<p>Please read the Asking Questions section, and once you've succeded with its self-evaluation follow the recommendations by commenting publicly HERE if required.</p>"},{"location":"asking-questions.html","title":"Asking Questions","text":""},{"location":"asking-questions.html#what-should-i-do-before-asking-a-question","title":"What should I do before asking a question?","text":"<p>Search for the answer! This is because the quickest answers are the ones that are already written! It's pretty possible that your question has already been answered somewhere!!</p> <p>Here are some places where to look before asking a question:</p> <ul> <li>Read the Frequently Asked Questions section of this manual: Developer Manual (FAQ)</li> <li>Read the manuals! You can find a list of all the manuals including this one at: Repository Index (Manuals and FAQs)</li> <li>Do a search among open and closed issues of the repositories associated to your project:<ol> <li>Go to the repositories that are most related from the Repository Index</li> <li>Click on the <code>Issues</code> tab, which defaults to a view on open Github Issues of the repository: see if you can find an answer among them!</li> <li>Click on <code>Closed</code> to see the closed Github Issues of the repository: see if you can find an answer among them!</li> <li>The <code>Filters</code> query changed from <code>is:issue is:open</code> to <code>is:issue is:closed</code> when you clicked on <code>Closed</code>. See if you can modify the query to find the answer you are looking for!</li> </ol> </li> <li>We still have some information in our old wiki</li> <li>You can also Google or DuckDuckGo it!</li> </ul>"},{"location":"asking-questions.html#i-cannot-find-my-question-answered-anywhere-how-and-where-should-i-ask-my-question","title":"I cannot find my question answered anywhere, how and where should I ask my question?","text":"<p>Please open a GitHub Issue following THESE GUIDELINES (\"Opening a GitHub Issue\").</p> <ul> <li>Note: If it refers to a wiki page, add a comment in the Discussion tab on the wiki.</li> </ul>"},{"location":"asking-questions.html#i-really-dont-like-github-issues-why-cant-i-just-bug-somebody-who-knows-the-answer","title":"I really don't like GitHub Issues, why can't I just bug somebody who knows the answer?","text":"<p>There are several reasons to prefer GitHub Issues rather than asking in person or private messaging:</p> <ul> <li>Answers are left for future people with doubts, and even the you from the future can run into the same issue after some time and then find the solution online!</li> <li>Developers can have more time to perform research and/or create new cool applications, maybe even that coffee-making or pizza-delivery robot you've been waiting for, yay!</li> <li>GitHub Issues have proved many times to be an efficient mechanism to receive answers from very unexpected contributors, which have provided many answers, new ideas, and worthy viewpoints!!</li> </ul>"},{"location":"asking-questions.html#self-evaluation-time","title":"Self evaluation time!","text":"<p>https://goo.gl/forms/s9RNrCZqVUAaausf1</p>"},{"location":"contributors.html","title":"Contributors","text":"<p>This is a list of people who contributed to the roboticslab-uc3m software ecosystem.</p> <ul> <li>Ainhoamm1</li> <li>Alberto Jard\u00f3n Huete (ajardon)</li> <li>Alberto Rodr\u00edguez Sanz (AlbertoRodriguezSanz)</li> <li>alicest9</li> <li>allura</li> <li>Alvaro Martinez (100406315)</li> <li>AlvaroMartinezR</li> <li>amridriss</li> <li>Ana Carnerero Calvo (anacarnerero)</li> <li>anacg1620</li> <li>Andrea Gil Ruiz (andreagil)</li> <li>Angordil</li> <li>Aroa (Aroa4)</li> <li>avegasanchez</li> <li>Bartek \u0141ukawski (PeterBowman)</li> <li>beaelp</li> <li>Borja P\u00e9rez (Borailuce99)</li> <li>Carlos Llamas (cllamasmar)</li> <li>Cristina Arenas Izquierdo (crisarenas)</li> <li>DanielSRSH</li> <li>David Est\u00e9vez Fern\u00e1ndez (David-Estevez)</li> <li>David Velasco Garcia</li> <li>Dennis Pinto (dpriver)</li> <li>Domingo Esteban (domingoesteban)</li> <li>Edwin Daniel O\u00f1a (edwinDOS)</li> <li>Elena Jim\u00e9nez Mart\u00edn</li> <li>Elisabeth Menendez (elisabeth-ms)</li> <li>Erik (err8029)</li> <li>Francisco Blanco (FranBesq)</li> <li>FranJNaranjo</li> <li>gavs1992</li> <li>Gerson-Martin</li> <li>ggconde</li> <li>Hualonso98</li> <li>Ignacio Montesino Valle (imontesino)</li> <li>Jaime Mas Santill\u00e1n (TheArmega)</li> <li>Jennifer J Gago Mu\u00f1oz (jgagom)</li> <li>jlpesoto</li> <li>Jonatan Gines Clavero (jginesclavero)</li> <li>Jorge-CM</li> <li>Juan G. Victores (jgvictores)</li> <li>Juan Lorente (j-lorente)</li> <li>Juan Miguel Garcia Haro (jmgarciah)</li> <li>JuanmaMec</li> <li>Lars V\u00e6hrens (larsvaehrens)</li> <li>Leytha</li> <li>Lisbeth Mena (lismena)</li> <li>LoliPinel (lpinel)</li> <li>Lu\u00eds Miguel Martins Almeida (Luis93A)</li> <li>mgd96</li> <li>Miguel Serna (serna92)</li> <li>munozyanez</li> <li>npuente</li> <li>Olaya \u00c1lvarez Tu\u00f1\u00f3n (olayasturias)</li> <li>oXygenB</li> <li>Pili Maldon (Pilibel10)</li> <li>RaulFdzbis</li> <li>Ra\u00fal de Santos (rsantos88)</li> <li>Robert W. Ellenberg (robEllenberg)</li> <li>Roberto Montero</li> <li>Santiago Morante (smorante)</li> <li>Sheilasr12</li> <li>smcdiaz</li> <li>Sofia Hernandez (sofiahernandezp)</li> <li>ssantamaria94</li> <li>victordiazobregon</li> <li>vistor (vistormu)</li> <li>V\u00edctor Pozo P\u00e9rez</li> <li>YEPEZ25</li> </ul>"},{"location":"documenting.html","title":"Documenting","text":""},{"location":"documenting.html#general-documenting","title":"General Documenting","text":"<ul> <li>The preferred way of documenting things (except Doxygen for C/C++) is Markdown (Markdown (Spanish)).</li> <li>You can find plenty of general recommendations for writing at: Redactar (Spanish)</li> </ul>"},{"location":"documenting.html#if-you-have-any-doubts-or-comments","title":"If you have any doubts or comments","text":"<p>Please read the Asking Questions section, and once you've succeded with its self-evaluation follow the recommendations by commenting publicly HERE if required.</p>"},{"location":"frequently-asked-questions.html","title":"Frequently Asked Questions (FAQ)","text":""},{"location":"frequently-asked-questions.html#which-operating-system-should-i-use","title":"Which Operating System should I use?","text":"<ul> <li>For desktops and laptops, we recommend a GNU/Linux (what is Linux? (Spanish)) distribution (what is a distribution? (Spanish)) on a native partition (what options do I have to install a distribution? (Spanish) and how to install a native partition (Spanish)). The specific GNU/Linux distribution we recommend is Ubuntu (<code>Ubuntu Desktop</code>). You are free to choose between  version <code>16.04 LTS</code> and <code>18.04 LTS</code>. Either one is a good option, although we have slight more support for <code>16.04</code>.</li> <li>For robot on-board CPUs, you can read through a long conversation at: questions-and-answers#20.</li> </ul>"},{"location":"frequently-asked-questions.html#i-was-told-to-install-something-how-can-i-do-that","title":"I was told to install something. How can I do that?","text":"<ul> <li>Please make sure you carefully read and understood the dedicated section at: how do I install programs on Linux? (Spanish)</li> <li>Each of our repositories usually contains instructions for installing, e.g. the initial <code>README.md</code> of https://github.com/roboticslab-uc3m/vision links to its doc/vision-install.md documentation file.<ul> <li>Note 1: Don't know what a repository is? Please read: Control de versiones (Spanish)</li> <li>Note 2: This manual contains an index of our repositories: HERE</li> </ul> </li> <li>For instructions on installing 3rd party software, please see a special repository we maintain: https://robots.uc3m.es/installation-guides/</li> </ul>"},{"location":"frequently-asked-questions.html#i-see-a-lot-of-commands-for-installation-but-do-not-understand-anything-what-do-they-mean","title":"I see a lot of commands for installation but do not understand anything. What do they mean?","text":"<ul> <li>Please read: Linux - Bash (Spanish)</li> </ul>"},{"location":"frequently-asked-questions.html#ive-heard-lots-of-stuff-about-git-and-github-what-do-they-mean","title":"I've heard lots of stuff about Git and GitHub. What do they mean?","text":"<ul> <li>Please read:<ul> <li>Git y GitHub (Spanish)</li> <li>Control de versiones - Git (Spanish)</li> </ul> </li> </ul>"},{"location":"frequently-asked-questions.html#how-should-i-program-stuff","title":"How should I program stuff?","text":"<ul> <li>Please make sure you carefully read and understood the dedicated section at: Best Practices: Programming</li> </ul>"},{"location":"frequently-asked-questions.html#how-should-i-document-stuff","title":"How should I document stuff?","text":"<ul> <li>Please make sure you carefully read and understood the dedicated section at: Best Practices: Documenting</li> </ul>"},{"location":"frequently-asked-questions.html#how-can-i-record-data-for-programming-by-demonstration-pbd-aka-learning-from-demonstration-lfd","title":"How can I record data for Programming by Demonstration (PbD) a.k.a. Learning from Demonstration (LfD)?","text":"<p>First, if moving the robot by hand, you'll want some gravity compensation to help out. That's <code>[gcmp]</code> off <code>BasicCartesianControl</code>. Refer to the BasicCartesianControl documentation for reference.</p> <p>Once you have publishing services running (robot joint/cartesian state, sensors output), there are two options for recording data:</p> <ol> <li> <p>Manually grab individual \"waypoints\" or sensor data and store in file(s). For instance, in the joint space, do some <code>yarp rpc /robotName/manipulatorName/rpc:i</code> to get joint positions.</p> </li> <li> <p>To record full trajectories (data stream of a certain YARP port) at a given sample rate, use yarpdatadumper. To record from several YARP ports, yarpdatadumperAppGenerator can be used to generate a yarpmanager app of yarpdatadumper components.</p> </li> </ol> <p>An example of recording a left arm trayectory of TEO:</p> <ul> <li>Terminal 1:   <code>launchManipulation  # Part of teoBase</code></li> <li>Terminal 2:   <code>yarpdatadumper --name /leftArm  # the data.log and data.log files will be   saved in a new `leftArm` directory</code></li> <li>Terminal 3:   <code>yarp connect /teo/leftArm/state:o /leftArm</code></li> </ul>"},{"location":"frequently-asked-questions.html#how-can-i-play-back-data-recorded-for-programming-by-demonstration-pbd-aka-learning-from-demonstration-lfd","title":"How can I play back data recorded for Programming by Demonstration (PbD) a.k.a. Learning from Demonstration (LfD)?","text":"<p>Depending on options above:</p> <ol> <li> <p>You can use the waypoints in a program as in this example.</p> </li> <li> <p>Use stuff from our tools repository. Specifically, you'll want the PlaybackThread. You can find an example of use at examplePlaybackThread and its corresponding test.</p> </li> </ol> <p>Note: There are several alternatives to these approaches, but these are kind of nice. yarpmanager has some record/playback facilities, but we haven't really tried them. Additionally, yarpdataplayer is the packaged YARP utility for playback. However, these interfaces have their playback capabilities tightly coupled to their GUI code. The previously mentioned components from the tools repository are lightweight and can be used independently as they are not coupled with any graphical interface.</p>"},{"location":"frequently-asked-questions.html#how-does-the-ipos-pt-mode-work","title":"How does the iPOS PT Mode work?","text":"<p><code>PT Mode</code> performs at a fixed rate at driver level. This is great, because it's real-time right next to the motor, so network latencies will not affect performance of set of a pre-defined joint-space targets (positions). Not justifying how it's implemented, but providing the reason why they actually did it as it is. Na\u00efve options:</p> <ol> <li>First receive (e.g. via CAN-bus) all the trajectory, then execute each target at the exact time given the fixed period. The issue with this is: how much memory should we reserve for this? What happens if somebody wants to run a trajectory with thousands or millions of intermediate targets?</li> <li>Receive the next target (e.g. via CAN-bus), execute it at exactly the planned time given the fixed period, repeat. The issue with this is: what happens if a target arrives late?</li> </ol> <p>None of these options is the implemented solution. The iPOS implementation is an intermediate solution, essentially a FIFO memory with 8 buffer positions (would have to check the iPOS manual for the specific correct value). So, you start filling it in, once it is initially full you start running, and then continue feeding it targets (e.g. via CAN-bus) at the rate established by the fixed period.</p> <ul> <li>If you feed it too slow, the buffer will empty before time and movement will stop.</li> <li>If you feed it too fast, the buffer will get full  (you'll see a <code>pt buffer full!</code> message in our TechnosoftIpos implementation).</li> </ul> <p>Hence, best to feed it at the most precise rate possible. Take into account that a PeriodicThread (YARP's old <code>RateThread</code>) will be more precise than adding a fixed delay at the end of your loop. You'll be asking yourself if there is a minimum threshold. The answer is yes, and this minimum should be estimated by the time consumed by CAN-bus communications to feed all the individual drivers per period.</p>"},{"location":"frequently-asked-questions.html#how-can-i-change-the-rgb-d-sensor-resolution","title":"How can I change the RGB-D sensor resolution?","text":"<p>We use the YARP <code>OpenNI2DeviceServer</code> device for this. In teoBase.xml#L36 you can see an example instance:</p> <pre><code>yarpdev --device OpenNI2DeviceServer --depthVideoMode 4 --colorVideoMode 9 --noRGBMirror\n</code></pre> <p>If you want to know what values you can use for <code>--depthVideoMode</code> and <code>--colorVideoMode</code> instead (and the actual meaning of the current values), please launch:</p> <pre><code>yarpdev --device OpenNI2DeviceServer --printVideoModes\n</code></pre>"},{"location":"frequently-asked-questions.html#ive-found-some-broken-links-in-your-repositories-which-have-been-renamed","title":"I've found some broken links in your repositories, which have been renamed?","text":"<p>Most of this was done at https://github.com/roboticslab-uc3m/questions-and-answers/issues/2</p> <ul> <li>https://github.com/roboticslab-uc3m/teo-body -&gt; https://github.com/roboticslab-uc3m/yarp-devices</li> <li>https://github.com/roboticslab-uc3m/teo-head -&gt; https://github.com/roboticslab-uc3m/vision and https://github.com/roboticslab-uc3m/speech</li> <li>https://github.com/roboticslab-uc3m/teo-main (old version) -&gt; https://github.com/roboticslab-uc3m/kinematics-dynamics</li> <li>https://github.com/roboticslab-uc3m/best-practices -&gt; https://github.com/roboticslab-uc3m/developer-manual</li> <li>https://github.com/roboticslab-uc3m/teo-software-manual -&gt; https://github.com/roboticslab-uc3m/teo-developer-manual</li> </ul>"},{"location":"frequently-asked-questions.html#i-have-read-this-page-and-related-links-and-i-have-doubts-andor-comments-what-should-i-do","title":"I have read this page and related links, and I have doubts and/or comments. What should I do?","text":"<p>Please follow these steps:</p> <ol> <li>Read the Asking Questions section as many as times as required to succeded with its self-evaluation.</li> <li>Follow its recommendations, which you will know because you have succeded in its self-evaluation. ^^</li> </ol>"},{"location":"github.html","title":"GitHub","text":""},{"location":"github.html#github-issues","title":"GitHub Issues","text":""},{"location":"github.html#opening-a-github-issue","title":"Opening a GitHub Issue","text":"<ol> <li>Make sure you have read the entire Asking Questions page and passed its self-evaluation! It's where we recommend to do a previous search and tell you where and how to look!</li> <li>Log into GitHub by clicking on <code>Sign in</code> (if not logged in already)</li> <li>Go to the repository that is most related from the Repository Index<ul> <li>If it is clearly specific to one repository, go to that repository. Examples: yarp-devices, kinematics-dynamics, vision...</li> <li>If it is related to the installation of a dependency, go to installation-guides</li> <li>If it is extremely generic but refers to a specific research project, go to the research project's main repository. Examples: alma, roboasset...<ul> <li>Note that research projects have more specific repositories, see the Project Index.</li> </ul> </li> <li>If it is extremely generic but refers to a specific robot, go to the robot's main repository. Examples: teo-main, asibot-main...<ul> <li>Note that robots have more specific repositories, see the Repository Index (Robots section); e.g. TEO has its own private teo-hardware-issues repository where you can also open an issue on any specific TEO hardware issue.</li> </ul> </li> <li>If it extremely generic and fits nowhere else, go to: questions-and-answers</li> </ul> </li> <li>Fix the objective/scope of the Issue to be as \"achievable\" as possible. If the task at hand seems too broad or prone to become labeled <code>epic</code>, open several Issues where each can be acomplished in less than 1-2 weeks.</li> <li>Click on <code>Issues</code>, then on <code>New Issue</code></li> <li>Add an accurate title and detailed description:<ul> <li>Explain, as detailed as possible, how to reproduce the issue or the specific behaviour for the feature.</li> <li>Include what you expected to happen and what actually happened.</li> <li>Please include information on what operating system and version you are working with. Also add any other relevant details.</li> <li>Remember you can use Markdown to include code fragments, bullet points, tables, etc. Don't know what Markdown is? Please read Markdown (Spanish)</li> <li>Feel free to attach any other information illustrating the issue, you can drag and drop: log files, helper images, etc.</li> </ul> </li> <li>Click on <code>Submit new issue</code></li> <li>If you have permissions, assign closest related <code>label(s)</code> to the Issue (also see GitHub Issue Labels section below).</li> <li>If you have permissions, add the Issue to closest related <code>Project(s)</code>.</li> </ol> <p>Troubleshooting:</p> <ul> <li>In certain repositories (none of the https://github.com/roboticslab-uc3m GitHub organization), you have to be part of the specific GitHub organization to be able to put an Issue. Please contact the specific GitHub organization owners if given the case.</li> </ul>"},{"location":"github.html#closing-a-github-issue","title":"Closing a GitHub Issue","text":"<p>Please cite the hash of the commit that closes the GitHub Issue (ideally, the hash of a merge commit) in the closing comment.</p>"},{"location":"github.html#github-issue-labels","title":"GitHub Issue Labels","text":"<p>We are attempting to unify GitHub labels, spawned from questions-and-answers#76.</p> <ul> <li>Existing repos: use https://github.com/destan/github-label-manager or similar to copy from teo-main.</li> <li>New repos: new repos will inherit labels defined at https://github.com/organizations/roboticslab-uc3m/settings/labels</li> </ul>"},{"location":"github.html#git-commit-and-push","title":"git commit (and push)","text":""},{"location":"github.html#when-should-i-commit-to-github","title":"When should I commit to GitHub?","text":"<p>Essentially, always. Whatever you are doing, as insignificant as it may seem, please upload the files to GitHub. Read on for the details.</p>"},{"location":"github.html#to-which-github-repository-should-i-commit","title":"To which GitHub repository should I commit?","text":"<p>Please use one of our repositories: Repository Index.</p>"},{"location":"github.html#to-which-repository-branch-should-i-commit","title":"To which repository branch should I commit?","text":"<p>Please upload your work to a new branch, branching out from <code>master</code>. This git workflow is called Forking.</p>"},{"location":"github.html#which-files-should-i-commit-to-the-branch","title":"Which files should I commit to the branch?","text":"<p>We commented above to commit absolutely everything, as insignificant as it may seem. There are a few exceptions, please AVOID uploading (all equally important):</p> <ul> <li>Files that can be generated via other files (executables, <code>.pdf</code>...): instead, document how to generate these files (steps for compiling/installing, <code>pdflatex</code>...)</li> <li>Compressed files (e.g. <code>.zip</code>): please upload each individual file (which can be done within the same commit)</li> <li>Big files (e.g. bibliography <code>.pdf</code>, videos...): think about more appropiate mechanisms (Mendeley, Google Drive...) and instead provide links in descriptions</li> <li>Files that are auto-generated by editor programs (e.g. editor backup files such as <code>.swp</code> or <code>.fcstd1</code>)</li> </ul> <p>A useful tool to avoid uploading undesired files is .gitignore: adjust it for the right project type to prevent from uploading these unwanted files.</p>"},{"location":"github.html#how-should-i-name-files-and-folders-i-commit","title":"How should I name files and folders I commit?","text":"<ul> <li>Use concise and explanatory names for your files and folders.</li> <li>Place your file inside existing folders when this makes sense, and create new folders only if required.</li> <li>DON'T ADD DIGITS to filenames as a hint of a specific version, iteration step, etc. Git is a version control that manages this internally for you. Over-write an existing file when commiting a modified version of it, and create new files only if required.</li> <li>AVOID DUPLICATES of existing files: code and documentation can and should be reused (don't repeat yourself (DRY)).</li> <li>Files in <code>/doc</code> should be named using kebab-case.</li> <li>For C/C++ and CMake files, see specific respective conventions, below.</li> <li>As a general naming rule: be coherent with the rest of the files in that repositories (CamelCase, kebab-case, etc).</li> <li>Prefer plural in directory names at the project root: <code>examples</code>, <code>libraries</code>, <code>programs</code>, <code>tests</code>, <code>cmake/templates</code> (exception: <code>doc</code>).</li> </ul>"},{"location":"github.html#how-should-commit-messages-be","title":"How should commit messages be?","text":"<p>Use a short and direct commit message that clearly states the changes made in that commit. Avoid using generic messages such as \"Upload files\", since they make it very hard for the repository users to track changes later on. Further literature: [1][2][3]</p> <p>There are two types of commits where you should always additionally reference an issue: merge commits, and hot-fix commits.</p>"},{"location":"github.html#github-pull-request","title":"GitHub Pull Request","text":"<ul> <li>Whenever you feel your changes are mature enough to be merged with the main project, create a Pull Request. Your work will be reviewed and merged by the owner/admin of that repository.</li> <li>Prepend <code>[WIP]</code> (which stands for Work In Progress) in the Pull Request title if you feel the branch is still not ready for a git merge.</li> </ul>"},{"location":"github.html#github-repositories","title":"GitHub Repositories","text":"<p>It is recommended to protect at least the main <code>master</code> branch.</p>"},{"location":"github.html#github-projects","title":"GitHub Projects","text":"<p>We use GitHub Projects to manage our workflow. They offer a nice Kanban that is integrated with GitHub Issues. For columns, we define the automated basics (please preserve the first 4 and in that order!), but new can be added per repo. The chosen ones are:</p> <ol> <li><code>To do</code></li> <li><code>Blocked</code></li> <li><code>Waiting for 3rd party</code></li> <li><code>In progress</code></li> <li><code>Done</code></li> </ol> <p>Read more at questions-and-answers#74.</p>"},{"location":"github.html#if-you-have-any-doubts-or-comments","title":"If you have any doubts or comments","text":"<p>Please read the Asking Questions section, and once you've succeded with its self-evaluation follow the recommendations by commenting publicly HERE if required.</p>"},{"location":"introduction.html","title":"Introduction","text":""},{"location":"introduction.html#which-operating-system-should-i-use","title":"Which Operating System should I use?","text":"<ul> <li>For desktops and laptops, we recommend a GNU/Linux (what is Linux? (Spanish)) distribution (what is a distribution? (Spanish)) on a native partition (what options do I have to install a distribution? (Spanish) and how to install a native partition (Spanish)). The specific GNU/Linux distribution we recommend is Ubuntu (<code>Ubuntu Desktop</code>). You are free to choose between  version <code>18.04 LTS</code> and <code>20.04 LTS</code>. Either one is a good option, although we have slight more support for <code>18.04</code> regarding OpenRAVE simulation.</li> <li>For robot on-board CPUs, you can read through a long conversation at: questions-and-answers#20.</li> </ul>"},{"location":"introduction.html#i-was-told-to-install-something-how-can-i-do-that","title":"I was told to install something. How can I do that?","text":"<ul> <li>Please make sure you carefully read and understood the dedicated section at: how do I install programs on Linux? (Spanish)</li> <li>Each of our repositories usually contains instructions for installing, e.g. the initial <code>README.md</code> of https://github.com/roboticslab-uc3m/vision links to its doc/vision-install.md documentation file.<ul> <li>Note 1: Don't know what a repository is? Please read: Control de versiones (Spanish)</li> <li>Note 2: This manual contains an index of our repositories: HERE</li> </ul> </li> <li>For instructions on installing 3rd party software, please see a special repository we maintain: https://robots.uc3m.es/installation-guides/</li> </ul>"},{"location":"introduction.html#i-see-a-lot-of-commands-for-installation-but-do-not-understand-anything-what-do-they-mean","title":"I see a lot of commands for installation but do not understand anything. What do they mean?","text":"<ul> <li>Please read: Linux - Bash (Spanish)</li> </ul>"},{"location":"introduction.html#ive-heard-lots-of-stuff-about-git-and-github-what-do-they-mean","title":"I've heard lots of stuff about Git and GitHub. What do they mean?","text":"<ul> <li>Please read:<ul> <li>Git y GitHub (Spanish)</li> <li>Control de versiones - Git (Spanish)</li> </ul> </li> </ul>"},{"location":"introduction.html#how-should-i-program-stuff","title":"How should I program stuff?","text":"<ul> <li>Please make sure you carefully read and understood the dedicated section at: Best Practices: Programming</li> </ul>"},{"location":"introduction.html#how-should-i-document-stuff","title":"How should I document stuff?","text":"<ul> <li>Please make sure you carefully read and understood the dedicated section at: Best Practices: Documenting</li> </ul>"},{"location":"introduction.html#i-have-read-this-page-and-related-links-and-i-have-doubts-andor-comments-what-should-i-do","title":"I have read this page and related links, and I have doubts and/or comments. What should I do?","text":"<p>Please follow these steps:</p> <ol> <li>Read the Asking Questions section as many as times as required to succeded with its self-evaluation.</li> <li>Follow its recommendations, which you will know because you have succeded in its self-evaluation. ^^</li> </ol>"},{"location":"appendix/index.html","title":"Appendices","text":"<ul> <li>Repository Index</li> <li>Project Index</li> <li>YARP Tricks</li> <li>Additional Links</li> </ul>"},{"location":"appendix/additional-links.html","title":"Additional Links","text":""},{"location":"appendix/additional-links.html#main-links","title":"Main Links","text":"<ul> <li>GitHub organization (source code): https://github.com/roboticslab-uc3m</li> <li>Google Drive (large files): Shared RoboticsLab (private)</li> </ul>"},{"location":"appendix/additional-links.html#more-information","title":"More Information","text":"<ul> <li>ASROB Tutorials (Spanish) (generated via asrob-uc3m/tutoriales)</li> <li>roboticslab-uc3m/developer-manual/issues</li> <li>roboticslab-uc3m/questions-and-answers/issues</li> <li>We still have some information in our old wiki</li> </ul>"},{"location":"appendix/additional-links.html#progress-tracking","title":"Progress Tracking","text":"<ul> <li>Top Contributors (generated via asrob-uc3m/repostatistics)</li> <li>Issues in Progress</li> <li>Project Index</li> <li>Dashboard</li> </ul>"},{"location":"appendix/project-index.html","title":"Project Index","text":"<p>List of GitHub projects provided by Robotics Lab of Universidad Carlos III de Madrid (UC3M) that are hosted at https://github.com/roboticslab-uc3m.</p>"},{"location":"appendix/project-index.html#general","title":"General","text":"<ul> <li>[ROBOTICSLAB] (roboticslab-uc3m)</li> <li>[ROBOTICSLAB-DOCUMENTATION] (roboticslab-uc3m)</li> <li>[ROBOTICSLAB-SIMULATION] (roboticslab-uc3m)</li> </ul>"},{"location":"appendix/project-index.html#robots-individual","title":"Robots (Individual)","text":""},{"location":"appendix/project-index.html#amor","title":"AMOR","text":"<p>Projects related to our AMOR robot.</p> <ul> <li>[AMOR] (roboticslab-uc3m)</li> </ul>"},{"location":"appendix/project-index.html#asibot","title":"ASIBOT","text":"<p>Projects related to our ASIBOT robot.</p> <ul> <li>[ASIBOT] (roboticslab-uc3m)</li> </ul>"},{"location":"appendix/project-index.html#teo","title":"TEO","text":"<p>Projects related to our TEO robot.</p> <ul> <li>[TEO] (roboticslab-uc3m)</li> <li>[TEO-HARDWARE-ISSUES] (roboticslab-uc3m/teo-hardware-issues) (private)</li> </ul>"},{"location":"appendix/project-index.html#tiago","title":"TIAGo","text":"<p>Proejcts related to our TIAGo robot.</p> <ul> <li>[TIAGO] (roboticslab-uc3m) (private)</li> </ul>"},{"location":"appendix/project-index.html#research","title":"Research","text":""},{"location":"appendix/project-index.html#research-projects-grants","title":"Research Projects (Grants)","text":"<ul> <li>[ALMA] (roboticslab-uc3m) (private)</li> <li>[ROBOASSET] (roboticslab-uc3m) (private)</li> <li> <p>[ROBOASSET-WPs] (roboticslab-uc3m) (private)</p> </li> <li> <p>[tiago-2021-accessrobot] (roboticslab-uc3m/tiago-2021-accessrobot) (private)</p> </li> </ul>"},{"location":"appendix/project-index.html#humanoid-robotics","title":"Humanoid Robotics","text":""},{"location":"appendix/project-index.html#rehab","title":"Rehab","text":""},{"location":"appendix/project-index.html#sign-language","title":"Sign Language","text":"<p>Projects related to our research in Robot Sign Language.</p> <ul> <li>[SIGN-LANGUAGE] (roboticslab-uc3m)</li> <li>[SIGN-LANGUAGE-PAPERS] (roboticslab-uc3m/sign-language-papers) (private)</li> </ul>"},{"location":"appendix/project-index.html#textiles","title":"Textiles","text":"<p>Projects related to our research towards a Robotic Laundry Assistant via Deformable Object Perception and Manipulation, as seen at https://robots.uc3m.es/robot-household-companion-web/.</p> <ul> <li>[TEXTILES] (roboticslab-uc3m)</li> <li>[TEXTILES-PAPERS] (roboticslab-uc3m/textiles-papers) (private)</li> <li>More projects within textiles/projects/ and textiles-papers/projects/</li> </ul>"},{"location":"appendix/project-index.html#horus","title":"Horus","text":"<p>Projects related to our research in HORUS.</p> <ul> <li>[HORUS] (roboticslab-uc3m) (private)</li> <li>[HORUS-PAPERS] (roboticslab-uc3m/horus-papers) (private)</li> <li>More projects within horus-papers/projects/ and horus-hardware/projects/</li> </ul>"},{"location":"appendix/project-index.html#xgnitive","title":"Xgnitive","text":"<p>Projects related to our research in XGNITIVE.</p> <ul> <li>[XGNITIVE] (roboticslab-uc3m)</li> <li>[XGNITIVE-PAPERS] (roboticslab-uc3m/xgnitive-papers) (private)</li> </ul>"},{"location":"appendix/project-index.html#admin-and-sysop","title":"Admin and Sysop","text":"<ul> <li>[WEB-AND-SOCIAL-MEDIA] (roboticslab-uc3m/web-and-social-media) (private)</li> </ul>"},{"location":"appendix/project-index.html#if-you-have-any-doubts-or-comments","title":"If you have any doubts or comments","text":"<p>Please read the Asking Questions section, and once you've succeded with its self-evaluation follow the recommendations by commenting publicly HERE if required.</p>"},{"location":"appendix/repository-index.html","title":"Repository Index","text":"<p>List of repositories provided by Robotics Lab of Universidad Carlos III de Madrid (UC3M) that are hosted at https://github.com/roboticslab-uc3m.</p>"},{"location":"appendix/repository-index.html#manuals-and-faqs","title":"Manuals and FAQs","text":"<ul> <li>developer-manual (hosted site) (this manual)</li> <li>installation-guides (hosted site)</li> <li>questions-and-answers</li> <li>help-at-uc3m (private)</li> <li>datasheets-and-manuals (private)</li> <li>Also see manuals in each corresponding section of Robots (individual)</li> </ul>"},{"location":"appendix/repository-index.html#general","title":"General","text":"<ul> <li>color-debug</li> <li>data-visualization</li> <li>kinematics-dynamics (doxygen)</li> <li>project-generator</li> <li>speech (doxygen)</li> <li>tools (doxygen)</li> <li>vision (doxygen)</li> <li>yarp-devices (doxygen)</li> <li>Simulation<ul> <li>openrave-tools</li> <li>openrave-yarp-plugins (doxygen)</li> <li>gazebo-tools</li> <li>coppeliasim-tools</li> <li>webots-tools</li> <li>Also see models in each corresponding section of Robots (individual)</li> </ul> </li> </ul>"},{"location":"appendix/repository-index.html#robots-individual","title":"Robots (Individual)","text":""},{"location":"appendix/repository-index.html#amor","title":"AMOR","text":"<p>Repositories related to our AMOR robot.</p> <ul> <li>amor-main</li> <li>amor-yarp-devices</li> <li>amor-configuration-files</li> <li>amor-api (private)</li> <li>Simulation<ul> <li>amor-openrave-models</li> </ul> </li> </ul>"},{"location":"appendix/repository-index.html#asibot","title":"ASIBOT","text":"<p>Repositories related to our ASIBOT robot.</p> <ul> <li>asibot-main</li> <li>asibot-configuration-files</li> <li>asibot-hmi</li> <li>Simulation<ul> <li>asibot-openrave-models</li> </ul> </li> </ul>"},{"location":"appendix/repository-index.html#teo","title":"TEO","text":"<p>Repositories related to our TEO robot.</p> <ul> <li>teo-developer-manual (hosted site)</li> <li>teo-main</li> <li>teo-configuration-files</li> <li>teo-hardware-issues (private)</li> <li>teo-ipos-backup (private)</li> <li>teo-electronics (private)</li> <li>Simulation<ul> <li>teo-blender-models</li> <li>teo-bullet-models</li> <li>teo-coppeliasim-models</li> <li>teo-gazebo-models</li> <li>teo-openrave-models</li> <li>teo-webots-models</li> <li>teo-simox-models</li> <li>teo_robot</li> <li>teo-ros-simulation</li> </ul> </li> <li>Demos<ul> <li>teo-self-presentation</li> <li>teo-demos-misc</li> <li>teo-follow-me</li> <li>waiter</li> </ul> </li> <li>Firmware<ul> <li>cui-pic-firmware</li> <li>lacquey-pic-firmware (legacy)</li> <li>jr3-mbed-firmware</li> <li>textiles-arduino-firmware</li> <li>Dextra</li> </ul> </li> </ul>"},{"location":"appendix/repository-index.html#tiago","title":"TIAGo","text":"<p>Repositories related to our TIAGo robot.</p> <ul> <li>tiago-2021-accessrobot (private)</li> <li>tiago-2021-accessrobot-interna (private)</li> <li>tiago-demos (private)</li> <li>tiago-docs (private)</li> <li>tiago-hardware (private)</li> <li>tiago-state-machines (private)</li> <li>tiago_tts</li> <li>semantic-map-server</li> <li>legacy-tiago-main (private)</li> </ul>"},{"location":"appendix/repository-index.html#research","title":"Research","text":""},{"location":"appendix/repository-index.html#research-projects-grants","title":"Research Projects (Grants)","text":"<ul> <li>alma (private)</li> <li>roboasset (private)</li> </ul>"},{"location":"appendix/repository-index.html#humanoid-robotics","title":"Humanoid Robotics","text":"<ul> <li>gait-experiments</li> <li>gait</li> <li>gaitcontrol</li> <li>footsteps</li> <li>force-torque-balance</li> <li>fusion-control</li> <li>manip-waiter</li> <li>teo_batc</li> <li>teo-bimanipulation</li> <li>teo-grasp</li> <li>TEO_push</li> <li>TEOTraGen</li> <li>teotragen_com</li> </ul>"},{"location":"appendix/repository-index.html#rehab","title":"Rehab","text":"<ul> <li>abbt-proximity-sensors</li> <li>pressmatic-android</li> </ul>"},{"location":"appendix/repository-index.html#sign-language","title":"Sign Language","text":"<p>Repositories related to our research in Robot Sign Language:</p> <ul> <li>dextra-yarp-devices</li> <li>sign-language-papers (private)</li> </ul>"},{"location":"appendix/repository-index.html#textiles","title":"Textiles","text":"<p>Repositories related to our research towards a Robotic Laundry Assistant via Deformable Object Perception and Manipulation, as seen at https://robots.uc3m.es/robot-household-companion-web/.</p> <ul> <li>textiles</li> <li>textiles-hanging</li> <li>textiles-papers (private)</li> <li>textiles-folding (private)</li> <li>robot-household-companion-web (private)</li> <li>More repos with \"textiles-\" prefix (private)</li> </ul>"},{"location":"appendix/repository-index.html#horus","title":"Horus","text":"<p>Repositories related to our research in HORUS.</p> <ul> <li>horus (private)</li> <li>horus-hardware (private)</li> <li>horus-papers (private)</li> <li>horus-openrave-models (private)</li> <li>More repos with \"horus-\" prefix (private)</li> </ul>"},{"location":"appendix/repository-index.html#xgnitive","title":"Xgnitive","text":"<p>Repositories related to our research in XGNITIVE.</p> <ul> <li>xgnitive</li> <li>xgnitive-papers (private)</li> </ul>"},{"location":"appendix/repository-index.html#playground","title":"Playground","text":"<ul> <li>daw2robot</li> </ul>"},{"location":"appendix/repository-index.html#admin-and-sysop","title":"Admin and Sysop","text":"<ul> <li>web-and-social-media (private)</li> <li>laboratorios (private)</li> <li>jgvictores/wikirobots (external, private)</li> </ul>"},{"location":"appendix/repository-index.html#additional-notes","title":"Additional Notes","text":"<p>We used to have some repositories at https://apps-robots.uc3m.es/svn/* (private)</p>"},{"location":"appendix/repository-index.html#if-you-have-any-doubts-or-comments","title":"If you have any doubts or comments","text":"<p>Please read the Asking Questions section, and once you've succeded with its self-evaluation follow the recommendations by commenting publicly HERE if required.</p>"},{"location":"appendix/yarp-tricks.html","title":"YARP Tricks","text":""},{"location":"appendix/yarp-tricks.html#yarp-rpc-commands-vocabs","title":"Yarp RPC commands (VOCABs)","text":"<p>Note that this is a hack. VOCABs may be updated without warning. The recommended YARP-ish way is via YARP_dev interfaces. An interactive way to do this is via an <code>ipython</code> console and following the yarp-devices Python examples (perma).</p> <p>Commands can be sent through the RPC channel using the <code>yarp rpc</code> utility.</p>"},{"location":"appendix/yarp-tricks.html#remote_controlboard","title":"remote_controlboard","text":"<p>Example: <code>yarp rpc /teo/leftArm/rpc:i</code>.</p>"},{"location":"appendix/yarp-tricks.html#encoder-commands","title":"encoder commands","text":"<ul> <li>query encoder reads:</li> </ul> <pre><code>[get] [enc] 0\n[get] [encs]\n</code></pre> <ul> <li>get estimated instantaneous speeds:</li> </ul> <pre><code>[get] [esp] 0\n[get] [esps]\n</code></pre> <ul> <li>get estimated instantaneous accelerations:</li> </ul> <pre><code>[get] [eac] 0\n[get] [eacs]\n</code></pre>"},{"location":"appendix/yarp-tricks.html#control-modes","title":"control modes","text":"<ul> <li>get control modes:</li> </ul> <pre><code>[get] [icmd] [cmod] 0\n[get] [icmd] [cmds]\n[get] [icmd] [cmog] (0 2 4)\n</code></pre> <ul> <li>set pos mode</li> </ul> <pre><code>[set] [icmd] [cmod] 0 [pos]\n[set] [icmd] [cmds] ([pos] [pos] [pos] [pos] [pos] [pos])\n[set] [icmd] [cmog] (0 2 4) ([pos] [pos] [pos])\n</code></pre> <ul> <li>set vel mode</li> </ul> <pre><code>[set] [icmd] [cmod] 0 [vel]\n[set] [icmd] [cmds] ([vel] [vel] [vel] [vel] [vel] [vel])\n[set] [icmd] [cmog] (0 2 4) ([vel] [vel] [vel])\n</code></pre> <ul> <li>set torque mode</li> </ul> <pre><code>[set] [icmd] [cmod] 0 [torq]\n[set] [icmd] [cmds] ([torq] [torq] [torq] [torq] [torq] [torq])\n[set] [icmd] [cmog] (0 2 4) ([torq] [torq] [torq])\n</code></pre> <ul> <li>set current mode (same as torque mode in TechnosoftIpos)</li> </ul> <pre><code>[set] [icmd] [cmod] 0 [icur]\n[set] [icmd] [cmds] ([icur] [icur] [icur] [icur] [icur] [icur])\n[set] [icmd] [cmog] (0 2 4) ([icur] [icur] [icur])\n</code></pre>"},{"location":"appendix/yarp-tricks.html#in-pos-mode","title":"in pos mode","text":"<ul> <li>set position</li> </ul> <pre><code>[set] [pos] 0 10.0\n[set] [poss] (10.0 10.0 10.0 10.0 10.0 10.0)\n[set] [posg] 3 (0 2 4) (10.0 10.0 10.0)\n</code></pre> <ul> <li>set ref velocities</li> </ul> <pre><code>[set] [vel] 0 10.0\n[set] [vels] (10.0 10.0 10.0 10.0 10.0 10.0)\n[set] [velg] 3 (0 2 4) (10.0 10.0 10.0)\n</code></pre> <ul> <li>set ref accelerations</li> </ul> <pre><code>[set] [acc] 0 10.0\n[set] [accs] (10.0 10.0 10.0 10.0 10.0 10.0)\n[set] [accg] 3 (0 2 4) (10.0 10.0 10.0)\n</code></pre> <ul> <li>check if motion done:</li> </ul> <pre><code>[get] [don] 0\n[get] [dons]\n[get] [dong] 3 (0 2 4)\n</code></pre> <ul> <li>command stop:</li> </ul> <pre><code>[set] [sto] 0\n[set] [stos]\n[set] [stog] (0 2 4)\n</code></pre>"},{"location":"appendix/yarp-tricks.html#in-vel-mode","title":"in vel mode","text":"<ul> <li>move in vel mode</li> </ul> <pre><code>[set] [vmos] (5.0 5.0 5.0)\n</code></pre>"},{"location":"appendix/yarp-tricks.html#in-torq-mode","title":"in torq mode","text":"<ul> <li>get actual torque</li> </ul> <pre><code>[get] [torq] [trq] 0\n</code></pre> <ul> <li>set reference torque</li> </ul> <pre><code>[set] [torq] [ref] 0 1.0\n</code></pre>"},{"location":"appendix/yarp-tricks.html#in-icur-mode","title":"in icur mode","text":"<ul> <li>get reference current</li> </ul> <pre><code>[get] [icur] [ref] 0\n</code></pre>"},{"location":"appendix/yarp-tricks.html#limits","title":"limits","text":"<ul> <li>get pos limits:</li> </ul> <pre><code>[get] [llim] 0\n</code></pre> <ul> <li>get vel limits:</li> </ul> <pre><code>[get] [vlim] 0\n</code></pre> <ul> <li>set vel limits:</li> </ul> <pre><code>[set] [vlim] 0 -20 20\n</code></pre>"},{"location":"appendix/yarp-tricks.html#remote-calibrator","title":"remote calibrator","text":"<ul> <li>homing:</li> </ul> <pre><code>[set] [reca] [hom] 0\n[set] [reca] [homs]\n</code></pre>"},{"location":"appendix/yarp-tricks.html#remote-variables","title":"remote variables","text":"<p>Some specific to CanBusBroker (perma):</p> <pre><code>[get] [ivar] [lvar]\n[get] [ivar] [mvar] id15-ipos\n[set] [ivar] [mvar] id15-ipos (linInterp ((mode pt) (bufferSize 1)))\n</code></pre>"},{"location":"appendix/yarp-tricks.html#analogsensorclient","title":"analogsensorClient","text":""},{"location":"appendix/yarp-tricks.html#calibration","title":"calibration","text":"<ul> <li>calibrate channel (single sensor)</li> </ul> <pre><code>[iana] [calc] 0\n</code></pre> <ul> <li>calibrate all sensors</li> </ul> <pre><code>[iana] [cal]\n</code></pre>"},{"location":"appendix/yarp-tricks.html#remote_grabber","title":"remote_grabber","text":"<ul> <li>https://github.com/roboticslab-uc3m/yarp-devices/tree/f4d5f67d31703e41cea721080fd16d6777e67799/libraries/YarpPlugins/AravisGigE#camera-parameters-control</li> </ul>"},{"location":"appendix/yarp-tricks.html#yarp-streaming-commands","title":"Yarp streaming commands","text":"<p>Certain interfaces do not accept RPC commands, therefore we need to connect to the stream-oriented <code>/command:i</code> port instead using <code>yarp write</code>. In this case, messages are usually head-body pairs of bottles (actually, a bottle in the head part and a vector of doubles as the body).</p>"},{"location":"appendix/yarp-tricks.html#remote_controlboard_1","title":"remote_controlboard","text":"<p>Example: <code>yarp write ... /teo/leftHand/command:i</code>.</p> <p>Important: the vector (message body) must contain double values. Passing integers here will cause the connection to fail.</p>"},{"location":"appendix/yarp-tricks.html#pwm-commands","title":"PWM commands","text":"<pre><code>([ipwm] [ref] 0) (10.0)\n</code></pre>"},{"location":"appendix/yarp-tricks.html#edit-ini-config-files-in-calc-excel","title":"Edit .ini config files in Calc (Excel)","text":"<p>Click <code>Separated by space</code> and <code>Merge delimiters</code>.</p> <pre><code>#!/bin/sh\nopenoffice.org -calc launchManipulation.ini\n# libreoffice -calc launchManipulation.ini\nsed -i 's/\\\"//g' launchManipulation.ini\n</code></pre>"},{"location":"programming/index.html","title":"Programming","text":""},{"location":"programming/index.html#main-programming-tools","title":"Main Programming Tools","text":"<ul> <li>YARP: See Programming with YARP.</li> <li>C/C++: Low-level (control) programming. See below.</li> <li>CMake: See below.</li> <li>Python: High-level (algorithm) programming.</li> <li>Doxygen: Document code, within the code.<ul> <li>Related issue: \"Program documentation: md vs dox\" (qa#29)</li> </ul> </li> <li>You can find more general recommendations for programming at: Programaci\u00f3n (Spanish)</li> </ul>"},{"location":"programming/index.html#general-programming","title":"General Programming","text":"<ul> <li>In case of trouble during installation of dependencies or additional software, take a look first at our dedicated repository: installation-guides (hosted site).</li> <li>If incorporating a new dependency or additional software, first take a look at our dedicated repository: installation-guides (hosted site). If it's not there, consider if it's a good option using the following recommended (but not mandatory) criteria: lightweight, flexible, multiplatform. If so, add it there, then link it to your project.</li> <li>Indent your code as if everything were Python. astyle can handle this quite automatically for you (use with caution).</li> <li>Any <code>toDo</code>, <code>fixMe</code>, etc. inlined in code must be associated to an open issue (with bidirectional reference).</li> <li>Headers, config files and CLI parameters.</li> <li>Read about Clean code.</li> <li>We use Test Driven Development and Continuous Integration.</li> <li>Let's repeat:<ul> <li>DON'T ADD DIGITS to filenames as a hint of a specific version, iteration step, etc. - version control is for this.</li> <li>AVOID DUPLICATES of existing files and programs: don't repeat yourself (DRY). Prior to creating a new program, thoroughly analyze whether you can enhance an existing one through adjustment or implementation of new parameters. Once you are sure that the functionality of a program could be extended, proceed with the usual steps (open an issue or fork &amp; create a pull request).</li> </ul> </li> </ul>"},{"location":"programming/index.html#programming-in-cmake","title":"Programming in CMake","text":"<ul> <li>Tutorial (Spanish)</li> <li>Naming conventions:<ul> <li>SCREAMING_SNAKE_CASE for the project name, files and configuration variables: <code>TEO_MAIN</code>, <code>TEO_MAINConfig.cmake.in</code>, <code>TEO_MAIN_INCLUDE_DIRS</code>.</li> <li>kebab-case for installed YARP context directories as set by <code>yarp_configure_external_installation()</code>: <code>teo-main</code>, <code>asibot-openrave-models</code>.</li> <li>Use the <code>ROBOTICSLAB_</code> (or <code>roboticslab-</code>) prefix whenever the uniqueness of the chosen name for the project could be easily compromised (keep in mind you'll want to invoke <code>find_package()</code>): <code>ROBOTICSLAB_YARP_DEVICES</code>, <code>ROBOTICSLAB_KINEMATICS_DYNAMICS_INCLUDE_DIRS</code>, <code>roboticslab-vision</code>.</li> </ul> </li> </ul>"},{"location":"programming/index.html#programming-in-cc","title":"Programming in C/C++","text":"<ul> <li>Some good slides on C are \"Thinking in C\" by Bruce Eckel, and some good books on C++ are \"Thinking in C++\" by Bruce Eckel.</li> <li>A nice IDE is Visual Studio Code, but you can also customize QtCreator, Eclipse, Atom or even Vim.</li> <li>Use project-generator for creation of new C/C++ projects.</li> <li>Report any problems with project-generator in its corresponding issues section. If you find that this solution doesn't suit you, at least stick to [CMake]((#programming-in-cmake) for any C/C++ project.</li> <li>Use UpperCamelCase for library and class names.</li> <li>Use lowerCamelCase for executable names.</li> <li>Avoid global variables.</li> <li>We prefer modern <code>std::string</code> class to alternatives like <code>char*</code> or <code>yarp::os::ConstString</code>.</li> <li>Store your classes inside a namespace block. Our current trend is <code>roboticslab::</code> (see https://github.com/roboticslab-uc3m/QA/issues/15).</li> <li>Keep a minimalistic <code>main()</code> by implementing your program as an OOP class, see comments on <code>RFModule</code> in best practices in Programming with YARP.</li> <li>Create and maintain unit tests for each class. We are currently using gtest, see kinematics-dynamics/tests/testKdlSolver, which is then integrated with Travis CI.</li> <li>It is recommended to mark a function as DEPRECATED for a month before eliminating it from an API. DEPRECATED macros can be generated via CMake as done here, then used within code as here. The full procedure, as described at QA #21, should be:<ol> <li>Open a GitHub Issue wherever the offending function is located.</li> <li>Label it as <code>announcement</code>.</li> <li>Use the search bar to localize any call to said function across roboticslab-uc3m and list all affected repos.</li> <li>If necessary, elaborate a removal plan and detail any steps that need to be taken to perform a seamless migration to the new API.</li> <li>Ping the corresponding team or whoever could need more action on their end.</li> <li>Proceed gradually and, finally, kill the function.</li> </ol> </li> <li>Always initialize class members, either in the class constructor or in any initialization method (e.g. your implementation of <code>DeviceDriver::open</code> when creating custom YARP devices) before doing the actual work.</li> <li>More links to best practices:<ul> <li>https://github.com/google/eng-practices</li> <li>https://google.github.io/styleguide/cppguide.html</li> <li>https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard</li> </ul> </li> </ul>"},{"location":"programming/index.html#if-you-have-any-doubts-or-comments","title":"If you have any doubts or comments","text":"<p>Please read the Asking Questions section, and once you've succeded with its self-evaluation follow the recommendations by commenting publicly HERE if required.</p>"},{"location":"programming/programming-with-yarp.html","title":"Programming with YARP","text":""},{"location":"programming/programming-with-yarp.html#programming-in-c-with-yarp","title":"Programming in C++ with YARP","text":"<ul> <li>We usually derive our base classes from yarp::os::RFModule, thus inheriting a configure(yarp::os::ResourceFinder&amp; rf) method that receives a map (rf) passed from <code>main()</code>, a close() that gets called by CRTL+C, and a updateModule() which is invoked with a periodicity measured in seconds given by getPeriod(). In case you need a function that gets called more often, you may inherit the run() method from yarp::os::PeriodicThread and obtain a periodicity given in seconds wih double precision, to be specified in the constructor.</li> <li>Implement your device as a class, and ideally as a YARP device (tutorial (Spanish)).</li> </ul>"},{"location":"programming/programming-with-yarp.html#regarding-close","title":"Regarding <code>close()</code>","text":"<p>If there exists a <code>close</code> method that needs to release unmanaged resources (dynamically allocated memory) or terminate stuff in an ordered manner (if using <code>PolyDriver</code> class members, e.g. <code>close</code> device A before device B), always define a class destructor that calls <code>close</code>, be it a <code>DeviceDriver</code> or an <code>RFModule</code> derived class. Also, make sure nothing bad happens if this <code>close</code> method is called several times (i.e. set dangling pointers to <code>nullptr</code>). Why is that:</p> <ul> <li><code>PolyDriver::open</code> may fail to initialize a subdevice, but it does not call the subdevice's <code>close</code> method; instead, it is immediately destructed via delete (ref).</li> <li>If <code>RFModule::configure</code> returns false, as explained in the above comments, <code>close</code> will never be called, hence we also want to use a destructor here.</li> <li><code>PolyDriver::close</code> will never close a wrapped device twice, but callers of <code>RFModule</code> can do that inadvertently because of the previous point: once after a successful <code>RFModule::configure</code> and a <code>CTRL+C</code> signal (it just stops execution flow and calls close before leaving <code>runModule</code>), and one more time on class destruction.</li> <li>Despite those two mechanisms being relatively different, this policy ensures we treat both <code>RFModule</code> and <code>DeviceDriver</code> constructs in a similar manner: <code>close()</code> on destruction, avoid dangling pointers.</li> </ul>"},{"location":"programming/programming-with-yarp.html#similar-and-related","title":"Similar and Related","text":"<ul> <li>Appendix: YARP Tricks</li> <li>Install YARP (perma)<ul> <li>Install YARP: Similar and Related (perma)</li> </ul> </li> </ul>"},{"location":"programming/programming-with-yarp.html#if-you-have-any-doubts-or-comments","title":"If you have any doubts or comments","text":"<p>Please read the Asking Questions section, and once you've succeded with its self-evaluation follow the recommendations by commenting publicly HERE if required.</p>"}]}